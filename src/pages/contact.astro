---
// src/pages/contact.astro
import Layout from '../layouts/Layout.astro';
import { fade } from 'astro:transitions';

// Updated Calendly URL
const calendlyUrl = 'https://calendly.com/jkrd09/30min';

// Check for query parameter to pre-fill message (optional)
const urlParams = new URLSearchParams(Astro.url.search);
const inquiryType = urlParams.get('type');
let initialMessage = '';
if (inquiryType === 'website') {
  initialMessage = "Hey Jake, I'm interested in learning more about your website development services.";
} else if (inquiryType === 'consulting') {
  initialMessage = "Hey Jake, I'd like to discuss consulting options.";
}

const formAction = "https://example.com/placeholder_form_handler"; // Placeholder: Replace with actual endpoint later
---
<Layout title="Contact">
  <main>
    <section id="contact-form" class="section scroll-target" transition:animate={fade({ duration: '0.7s' })}>
      <div class="container" style="max-width: 700px; text-align: center;">
        <h1>Get in Touch</h1>
        <p style="font-size: 1.1rem; color: var(--text-muted); margin-bottom: 2.5rem;">
          Have questions about consulting, website development, or just want to say hi? Use the form below or <a href={calendlyUrl} onclick={`Calendly.initPopupWidget({url: '${calendlyUrl}'}); return false;`}>book a Discovery Call</a>.
        </p>

        {/* Basic HTML Form Structure */}
        <form id="contactForm" action={formAction} method="POST" style="text-align: left;">
          <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required />
          </div>
          <div class="form-group">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required />
          </div>
          <div class="form-group">
            <label for="message">Message:</label>
            <textarea id="message" name="message" rows="6" required>{initialMessage}</textarea>
          </div>
          <div style="text-align: center; margin-top: 2rem;">
            <button type="submit" class="button">Send Message</button>
          </div>
        </form>

        {/* Submission Confirmation Pop-up (Hidden Initially) */}
        <div id="confirmationPopup" class="popup-overlay" style="display: none;">
          <div class="popup-content">
            <span class="close-popup" onclick="document.getElementById('confirmationPopup').style.display='none'">&times;</span>
            <h2>Message Sent!</h2>
            <p>Thanks for reaching out. I'll get back to you as soon as possible.</p>
            <button class="button button-secondary" onclick="document.getElementById('confirmationPopup').style.display='none'">Close</button>
          </div>
        </div>

      </div>
    </section>

    {/* Ensure NO duplicate footer HTML is here */}

  </main>
</Layout>

<script define:vars={{ formAction }}>
  function setupContactForm() {
    const form = document.getElementById('contactForm');
    const confirmationPopup = document.getElementById('confirmationPopup');

    if (!form || !confirmationPopup) {
      // console.error("Contact form or confirmation popup not found.");
      return;
    }

    // --- Robust Listener Management: Clone & Replace ---
    const handleFormSubmit = async (event) => {
        event.preventDefault(); // Prevent default submission for now

        // --- Placeholder for actual submission logic ---
        console.log('Form submitted (placeholder). Data:', new FormData(form));
        // In a real scenario, you would fetch() to formAction here
        // and handle success/error responses.

        // --- Show confirmation pop-up ---
        confirmationPopup.style.display = 'flex'; // Show the popup

        // Optionally clear the form
        // form.reset();
    };

    // Clone, replace, and add listener to the new node
    const newForm = form.cloneNode(true);
    // Preserve initial message if it was set by Astro
    const initialMessageTextarea = newForm.querySelector('#message');
    const originalMessageTextarea = form.querySelector('#message');
    if (initialMessageTextarea && originalMessageTextarea) {
        initialMessageTextarea.value = originalMessageTextarea.value;
    }
    form.parentNode.replaceChild(newForm, form);
    newForm.addEventListener('submit', handleFormSubmit);
    // --- End Robust Listener Management ---

    // Add listener to close button within the popup (if needed, though inline onclick is present)
    const closeButton = confirmationPopup.querySelector('.close-popup');
    const closeButtonSecondary = confirmationPopup.querySelector('.button-secondary');
    if (closeButton) {
        closeButton.onclick = () => confirmationPopup.style.display = 'none';
    }
     if (closeButtonSecondary) {
        closeButtonSecondary.onclick = () => confirmationPopup.style.display = 'none';
    }
    // console.log('Contact form script initialized.');
  }


  // Run on initial load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupContactForm);
  } else {
    setupContactForm(); // DOM already loaded
  }

  // Re-run after Astro page transitions
  document.addEventListener('astro:after-swap', () => {
    // console.log('astro:after-swap triggered for contact form');
    requestAnimationFrame(setupContactForm);
  });

</script>

<style>
  .form-group {
    margin-bottom: 1.5rem;
  }
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--heading-text);
  }
  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.8rem 1rem;
    border: 1px solid var(--border-color);
    background-color: var(--card-bg);
    color: var(--body-text);
    border-radius: 6px;
    font-size: 1rem;
    box-sizing: border-box;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(250, 204, 21, 0.3); /* Subtle focus ring */
  }
  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }

  /* Pop-up Styles */
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Dark overlay */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Ensure it's on top */
    opacity: 0; /* Start hidden */
    transition: opacity 0.3s ease-in-out;
    padding: 1rem;
    box-sizing: border-box;
  }
  .popup-overlay[style*="display: flex;"] { /* More specific selector for when it's shown */
      opacity: 1;
  }

  .popup-content {
    background-color: var(--card-bg);
    padding: 2.5rem;
    border-radius: 12px;
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.5);
    text-align: center;
    max-width: 450px;
    width: 100%;
    position: relative;
    border: 1px solid var(--border-color);
    transform: scale(0.95); /* Start slightly small */
    transition: transform 0.3s ease-in-out;
  }
   .popup-overlay[style*="display: flex;"] .popup-content {
      transform: scale(1); /* Scale to full size when shown */
   }

  .popup-content h2 {
    color: var(--heading-text);
    margin-top: 0;
    margin-bottom: 1rem;
  }
  .popup-content p {
    color: var(--text-muted);
    margin-bottom: 2rem;
  }
  .close-popup {
    position: absolute;
    top: 1rem;
    right: 1.5rem;
    font-size: 2rem;
    color: var(--text-muted);
    cursor: pointer;
    line-height: 1;
    transition: color 0.2s ease;
  }
  .close-popup:hover {
    color: var(--primary-color);
  }
</style>
